name: Build and Release SkyFi ATAK Plugin

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (debug/release)'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release
      create_release:
        description: 'Create GitHub release'
        required: true
        default: true
        type: boolean

env:
  JAVA_VERSION: '11'
  ANDROID_COMPILE_SDK: '33'
  ANDROID_MIN_SDK: '21'
  ANDROID_TARGET_SDK: '33'
  PLUGIN_VERSION: '2.0'
  ATAK_VERSION: '5.4.0'

jobs:
  build:
    name: Build APKs
    runs-on: ubuntu-latest
    strategy:
      matrix:
        flavor: [civ, mil]
        build_type: [debug, release]
        exclude:
          # For manual dispatch, only build the specified type
          - build_type: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.build_type != 'debug' && 'debug' || 'never' }}
          - build_type: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.build_type != 'release' && 'release' || 'never' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: zulu

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: ${{ env.ANDROID_COMPILE_SDK }}
          target: default
          arch: x86_64

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache Android SDK
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.ANDROID_SDK_ROOT }}
          key: ${{ runner.os }}-android-sdk-${{ env.ANDROID_COMPILE_SDK }}

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Set up keystore for signing
        run: |
          # Copy the debug keystore from android_keystore to the build directory
          mkdir -p app/build
          if [ -f "android_keystore" ]; then
            cp android_keystore app/build/android_keystore
            echo "Keystore copied successfully"
          else
            echo "Warning: android_keystore not found, creating dummy keystore"
            # Create a dummy keystore for CI builds
            keytool -genkey -v -keystore app/build/android_keystore -alias wintec_mapping -keyalg RSA -keysize 2048 -validity 10000 -storepass tnttnt -keypass tnttnt -dname "CN=SkyFi CI, OU=Development, O=SkyFi, L=Unknown, S=Unknown, C=US"
          fi

      - name: Create local.properties
        run: |
          echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties
          echo "takrepo.force=false" >> local.properties

      - name: Build ${{ matrix.flavor }} ${{ matrix.build_type }} APK
        run: |
          ./gradlew --no-daemon assemble${{ matrix.flavor }}${{ matrix.build_type }} -Ptakrepo.force=false --stacktrace
        env:
          GRADLE_OPTS: -Dorg.gradle.daemon=false

      - name: Find APK files
        id: find_apk
        run: |
          APK_PATH=$(find app/build/outputs/apk/${{ matrix.flavor }}/${{ matrix.build_type }} -name "*.apk" -type f | head -1)
          if [ -f "$APK_PATH" ]; then
            echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
            echo "apk_name=$(basename $APK_PATH)" >> $GITHUB_OUTPUT
            echo "Found APK: $APK_PATH"
            ls -la "$APK_PATH"
          else
            echo "APK not found!"
            find app/build/outputs -name "*.apk" -type f || true
            exit 1
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: skyfi-plugin-${{ matrix.flavor }}-${{ matrix.build_type }}
          path: ${{ steps.find_apk.outputs.apk_path }}
          retention-days: 30

      - name: Generate APK info
        id: apk_info
        run: |
          APK_PATH="${{ steps.find_apk.outputs.apk_path }}"
          APK_SIZE=$(stat -c%s "$APK_PATH" | numfmt --to=iec-i --suffix=B)
          APK_SHA256=$(sha256sum "$APK_PATH" | cut -d' ' -f1)
          
          echo "apk_size=$APK_SIZE" >> $GITHUB_OUTPUT
          echo "apk_sha256=$APK_SHA256" >> $GITHUB_OUTPUT
          
          # Create info file
          INFO_FILE="apk-info-${{ matrix.flavor }}-${{ matrix.build_type }}.txt"
          cat > "$INFO_FILE" << EOF
          APK: ${{ steps.find_apk.outputs.apk_name }}
          Flavor: ${{ matrix.flavor }}
          Build Type: ${{ matrix.build_type }}
          Size: $APK_SIZE
          SHA256: $APK_SHA256
          Plugin Version: ${{ env.PLUGIN_VERSION }}
          ATAK Version: ${{ env.ATAK_VERSION }}
          Built: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          Commit: ${{ github.sha }}
          EOF
          
          echo "info_file=$INFO_FILE" >> $GITHUB_OUTPUT

      - name: Upload APK info
        uses: actions/upload-artifact@v4
        with:
          name: skyfi-plugin-info-${{ matrix.flavor }}-${{ matrix.build_type }}
          path: ${{ steps.apk_info.outputs.info_file }}
          retention-days: 30

  create-release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: >
      always() && 
      needs.build.result == 'success' && 
      (startsWith(github.ref, 'refs/tags/v') || 
       (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          find artifacts/ -type f -name "*.apk" -o -name "*.txt" | sort

      - name: Generate release notes
        id: release_notes
        run: |
          # Determine version from tag or use default
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="v${{ env.PLUGIN_VERSION }}-$(date +%Y%m%d-%H%M%S)"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Generate release notes
          NOTES_FILE="release-notes.md"
          cat > "$NOTES_FILE" << EOF
          # SkyFi ATAK Plugin $VERSION
          
          ## Build Information
          - **Plugin Version**: ${{ env.PLUGIN_VERSION }}
          - **ATAK Version**: ${{ env.ATAK_VERSION }}
          - **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - **Commit**: [\`${GITHUB_SHA:0:7}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          
          ## Included APKs
          
          EOF
          
          # Add info about each APK
          for info_file in artifacts/skyfi-plugin-info-*/apk-info-*.txt; do
            if [ -f "$info_file" ]; then
              echo "### $(basename "$info_file" .txt | sed 's/apk-info-//' | tr '-' ' ' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')" >> "$NOTES_FILE"
              echo '```' >> "$NOTES_FILE"
              cat "$info_file" >> "$NOTES_FILE"
              echo '```' >> "$NOTES_FILE"
              echo "" >> "$NOTES_FILE"
            fi
          done
          
          cat >> "$NOTES_FILE" << EOF
          ## Installation
          
          1. Download the appropriate APK for your ATAK version:
             - **CIV builds** for civilian ATAK versions
             - **MIL builds** for military ATAK versions
          
          2. Install using ADB:
             \`\`\`bash
             adb install -r skyfi-plugin-*.apk
             \`\`\`
          
          3. The plugin will appear in ATAK's plugin manager
          
          ## Verification
          
          All APKs are signed with the debug certificate for beta testing. 
          Verify the SHA256 checksums listed above after download.
          
          ---
          
          *This is a beta release for Space Force project development and testing.*
          EOF
          
          echo "notes_file=$NOTES_FILE" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_notes.outputs.version }}
          name: SkyFi ATAK Plugin ${{ steps.release_notes.outputs.version }}
          body_path: ${{ steps.release_notes.outputs.notes_file }}
          draft: true
          prerelease: true
          files: |
            artifacts/skyfi-plugin-*/*.apk
            artifacts/skyfi-plugin-info-*/*.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update release summary
        run: |
          echo "## Release Created Successfully" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.release_notes.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: Draft release created" >> $GITHUB_STEP_SUMMARY
          echo "- **APKs**: $(find artifacts/ -name "*.apk" | wc -l) files uploaded" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the draft release on GitHub" >> $GITHUB_STEP_SUMMARY
          echo "2. Test the APKs as needed" >> $GITHUB_STEP_SUMMARY
          echo "3. Publish the release when ready" >> $GITHUB_STEP_SUMMARY

  build-summary:
    name: Build Summary
    needs: [build, create-release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Generate build summary
        run: |
          echo "# SkyFi ATAK Plugin Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ **Build Status**: Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build Status**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Ref**: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: [\`${GITHUB_SHA:0:7}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Plugin Version**: ${{ env.PLUGIN_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ATAK Version**: ${{ env.ATAK_VERSION }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.create-release.result }}" == "success" ]]; then
            echo "- **Release**: ✅ Created successfully" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.create-release.result }}" == "skipped" ]]; then
            echo "- **Release**: ⏭️ Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Release**: ❌ Failed" >> $GITHUB_STEP_SUMMARY
          fi