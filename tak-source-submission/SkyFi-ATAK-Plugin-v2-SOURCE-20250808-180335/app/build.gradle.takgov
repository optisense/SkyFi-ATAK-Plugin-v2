////////////////////////////////////////////////////////////////////////////////
//
// PLUGIN_VERSION is the common version name when describing the plugin.
// ATAK_VERSION   is for the version of ATAK this plugin should be compatible
//                with some examples include 3.11.0, 3.11.0.civ 3.11.1.fvey
//
////////////////////////////////////////////////////////////////////////////////

buildscript {

    ext.PLUGIN_VERSION = "2.0-beta5"
    ext.ATAK_VERSION = "5.3.0"  // Compile against older SDK for broader compatibility

    def takdevVersion = '2.+'

    def getValueFromPropertiesFile = { propFile, key ->
        if(!propFile.isFile() || !propFile.canRead())
            return null
        def prop = new Properties()
        def reader = propFile.newReader()
        try {
            prop.load(reader)
        } finally {
            reader.close()
        }
        return prop.get(key)
    }

    def getProperty = { name, defValue ->
        def prop = project.properties[name] ?:
                getValueFromPropertiesFile(project.rootProject.file('local.properties'), name)
        return (null == prop) ? defValue : prop
    }

    def urlKey = 'takrepo.url'

    ext.isDevKitEnabled = { ->
        return getProperty(urlKey, null) != null
    }

    ext.takrepoUrl = getProperty(urlKey, 'https://localhost/')
    ext.takrepoUser = getProperty('takrepo.user', 'invalid')
    ext.takrepoPassword = getProperty('takrepo.password', 'invalid')
    ext.takdevPlugin = getProperty('takdev.plugin', "${rootDir}/atak-gradle-takdev.jar")

    repositories {
        google()
        mavenCentral()
        mavenLocal()
        maven {
            url takrepoUrl
            credentials {
                username = takrepoUser
                password = takrepoPassword
            }
        }
    }
    dependencies {
        if(isDevKitEnabled()) {
            classpath "com.atakmap.gradle:atak-gradle-takdev:${takdevVersion}"
        } else {
            classpath files(takdevPlugin)
        }
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven {
            url takrepoUrl
            credentials {
                username = takrepoUser
                password = takrepoPassword
            }
        }
    }
}

apply plugin: 'com.android.application'
apply plugin: 'atak-takdev-plugin'

android {
    compileSdk 33
    namespace 'com.skyfi.atak.plugin'

    buildFeatures {
        buildConfig = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // ATAK plugins must be APKs, not AABs
    // Bundle configuration removed - not compatible with AGP 7.2.2

    packagingOptions {
        jniLibs {
            useLegacyPackaging = true
        }
        resources {
            excludes += ['META-INF/INDEX.LIST']
        }
    }

    signingConfigs {
        // Point to keystore that takdev copies into app/build/android_keystore
        debug {
            storeFile file("${buildDir}/android_keystore")
            storePassword "tnttnt"
            keyAlias "wintec_mapping"
            keyPassword "tnttnt"
        }
        release {
            storeFile file("${buildDir}/android_keystore")
            storePassword "tnttnt"
            keyAlias "wintec_mapping"
            keyPassword "tnttnt"
        }
    }

    buildTypes {
        debug {
            debuggable true
            matchingFallbacks = ['sdk']
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false  // Disable ProGuard for TAK.gov build
            matchingFallbacks = ['odk']
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "application"

    def supportedFlavors = [
        [ name : 'civ', default: true ],
        [ name : 'mil' ],
        [ name : 'gov' ],
    ]

    productFlavors {
        supportedFlavors.each { flav ->
            "${flav.name}" {
                getIsDefault().set(flav.default)
                dimension "application"

                if (!flav.name.equals("civ") && !flav.name.equals("mil")) {
                    applicationIdSuffix = ".${flav.name}"
                }
                matchingFallbacks = ['civ']

                def pluginApiFlavor = flav.name.equals('gov') ? 'CIV' : "${flav.name.toUpperCase()}"
                manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".${pluginApiFlavor}"]
            }
        }
        
        applicationVariants.all { variant ->
            variant.resValue "string", "versionName", variant.versionName
        }
    }

    sourceSets {
        main {
            setProperty("archivesBaseName", "ATAK-Plugin-" + rootProject.name + "-" + PLUGIN_VERSION + "-" + getVersionName() + "-" + ATAK_VERSION)
            defaultConfig.versionCode = getVersionCode()
            defaultConfig.versionName = PLUGIN_VERSION + " (" + getVersionName() + ") - [" + ATAK_VERSION + "]"
        }

        debug {
            java.srcDirs 'src/debug/java'
            res.srcDirs 'src/debug/res'
        }
        release {
            java.srcDirs 'src/release/java'
            res.srcDirs 'src/release/res'
        }

        if (file("${projectDir}/src/gov").exists()) {
            gov {
                res.srcDirs = ['src/gov/res']
                java.srcDirs = ['src/gov/java']
            }
        }

        if (file("${projectDir}/src/mil").exists()) {
            mil {
                res.srcDirs = ['src/mil/res']
                java.srcDirs = ['src/mil/java']
            }
        }

        if (file("${projectDir}/src/civ").exists()) {
            civ {
                res.srcDirs = ['src/civ/res']
                java.srcDirs = ['src/civ/java']
            }
        }
    }

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 33
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: '*.jar')
    
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.recyclerview:recyclerview:1.3.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.9.0'
    
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.11.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    
    implementation 'org.locationtech.jts:jts-core:1.18.2'
    implementation 'com.github.bumptech.glide:glide:4.15.1'
    
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'androidx.test:core:1.5.0'
    testImplementation 'org.robolectric:robolectric:4.10.3'
    testImplementation 'org.mockito:mockito-core:5.4.0'
    
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}