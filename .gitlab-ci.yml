# TAK.gov GitLab CI/CD Pipeline for ATAK Plugin
# Requirements: Gradle 6.9.1, JDK 17, ATAK SDK 5.4.0.16

stages:
  - validate
  - build
  - package
  - sign

variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.parallel=false"
  GRADLE_USER_HOME: "${CI_PROJECT_DIR}/.gradle"
  ANDROID_SDK_ROOT: "/opt/android-sdk"
  JAVA_HOME: "/usr/lib/jvm/java-17-openjdk"
  
# Cache Gradle dependencies
cache:
  key: "${CI_COMMIT_REF_SLUG}"
  paths:
    - .gradle/
    - build/
    - app/build/

# Validate environment and dependencies
validate:environment:
  stage: validate
  image: openjdk:17-jdk-slim
  script:
    - echo "Validating build environment..."
    - java -version
    - echo "Checking for required files..."
    - test -f gradlew || exit 1
    - test -f app/build.gradle || exit 1
    - test -f settings.gradle || exit 1
    - test -f atak-gradle-takdev.jar || echo "Warning - Local TAK SDK not found, will use TAK.gov repository"
    - echo "Checking Gradle wrapper version..."
    - ./gradlew --version | grep "Gradle 6.9.1" || echo "Warning - Gradle version mismatch"
    - echo "Validating plugin.xml uses SkyFiPluginCompatWrapper..."
    - grep -q "SkyFiPluginCompatWrapper" app/src/main/assets/plugin.xml || exit 1
  artifacts:
    paths:
      - build/
    expire_in: 1 hour

# Build debug APK for testing
build:debug:
  stage: build
  image: openjdk:17-jdk-slim
  before_script:
    - apt-get update && apt-get install -y wget unzip
    - chmod +x gradlew
    # Configure TAK.gov repository if credentials available
    - |
      if [[ -n "$CI_TAK_REPO_USER" && -n "$CI_TAK_REPO_PASSWORD" ]]; then
        echo "Configuring TAK.gov repository access..."
        mkdir -p ~/.gradle
        cat > ~/.gradle/gradle.properties << EOF
      takRepoUrl=https://artifacts.tak.gov/artifactory/tak-sdk
      takRepoUser=${CI_TAK_REPO_USER}
      takRepoPassword=${CI_TAK_REPO_PASSWORD}
      EOF
      else
        echo "Using local SDK (no TAK.gov credentials found)"
      fi
  script:
    - echo "Building debug APK..."
    - ./gradlew clean assembleCivDebug --stacktrace --info
    - echo "Debug APK built successfully"
    - ls -la app/build/outputs/apk/civ/debug/
  artifacts:
    paths:
      - app/build/outputs/apk/civ/debug/*.apk
      - app/build/reports/
    expire_in: 1 week
  only:
    - main
    - develop
    - merge_requests

# Build release APK (unsigned)
build:release:
  stage: build
  image: openjdk:17-jdk-slim
  before_script:
    - apt-get update && apt-get install -y wget unzip
    - chmod +x gradlew
    # Configure TAK.gov repository if credentials available
    - |
      if [[ -n "$CI_TAK_REPO_USER" && -n "$CI_TAK_REPO_PASSWORD" ]]; then
        echo "Configuring TAK.gov repository access..."
        mkdir -p ~/.gradle
        cat > ~/.gradle/gradle.properties << EOF
      takRepoUrl=https://artifacts.tak.gov/artifactory/tak-sdk
      takRepoUser=${CI_TAK_REPO_USER}
      takRepoPassword=${CI_TAK_REPO_PASSWORD}
      EOF
      else
        echo "Using local SDK (no TAK.gov credentials found)"
      fi
  script:
    - echo "Building unsigned release APK..."
    - ./gradlew clean assembleCivRelease --stacktrace --info
    - echo "Release APK built successfully (unsigned)"
    - ls -la app/build/outputs/apk/civ/release/
  artifacts:
    paths:
      - app/build/outputs/apk/civ/release/*.apk
      - app/build/reports/
    expire_in: 1 month
  only:
    - main
    - tags

# Build all variants (CIV and MIL if configured)
build:variants:
  stage: build
  image: openjdk:17-jdk-slim
  before_script:
    - apt-get update && apt-get install -y wget unzip
    - chmod +x gradlew
    - |
      if [[ -n "$CI_TAK_REPO_USER" && -n "$CI_TAK_REPO_PASSWORD" ]]; then
        mkdir -p ~/.gradle
        cat > ~/.gradle/gradle.properties << EOF
      takRepoUrl=https://artifacts.tak.gov/artifactory/tak-sdk
      takRepoUser=${CI_TAK_REPO_USER}
      takRepoPassword=${CI_TAK_REPO_PASSWORD}
      EOF
      fi
  script:
    - echo "Building all variants..."
    - ./gradlew clean assemble --stacktrace
    - echo "All variants built successfully"
    - find app/build/outputs/apk -name "*.apk" -type f
  artifacts:
    paths:
      - app/build/outputs/apk/**/*.apk
    expire_in: 1 week
  when: manual
  only:
    - main

# Package source for TAK.gov submission
package:source:
  stage: package
  image: alpine:latest
  before_script:
    - apk add --no-cache zip rsync
  script:
    - echo "Creating TAK.gov source submission package..."
    - export TIMESTAMP=$(date +%Y%m%d-%H%M%S)
    - export SUBMISSION_NAME="SkyFi-ATAK-Plugin-v2-TAKGOV-${TIMESTAMP}"
    - mkdir -p build/submission/${SUBMISSION_NAME}
    - rsync -av --exclude='.git*' --exclude='build/' --exclude='app/build/' --exclude='*.apk' --exclude='releases/' --exclude='.gradle/' --exclude='.idea/' ./ build/submission/${SUBMISSION_NAME}/
    - cd build/submission
    - zip -r ${SUBMISSION_NAME}.zip ${SUBMISSION_NAME}/
    - echo "Source package created - ${SUBMISSION_NAME}.zip"
    - ls -lh ${SUBMISSION_NAME}.zip
  artifacts:
    paths:
      - build/submission/*.zip
    expire_in: 1 month
  only:
    - main
    - tags

# Prepare for TAK.gov signing
sign:prepare:
  stage: sign
  image: alpine:latest
  dependencies:
    - build:release
  script:
    - echo "Preparing APKs for TAK.gov signing..."
    - mkdir -p build/signing
    - cp app/build/outputs/apk/civ/release/*.apk build/signing/ || true
    - echo "Creating signing request document..."
    - printf "# TAK.gov Signing Request\n\nPlugin: SkyFi ATAK Plugin v2\nVersion: ${CI_COMMIT_TAG:-${CI_COMMIT_SHORT_SHA}}\nTarget ATAK Version: 5.4.0.16\n\n## Files for Signing\n- SkyFi-debug.apk (for testing)\n- SkyFi-release-unsigned.apk (for production)\n\n## Important Notes\n- Plugin uses SkyFiPluginCompatWrapper (no IServiceController dependency)\n- Built with Gradle 6.9.1 and JDK 17\n- Tested for compatibility with ATAK-CIV 5.4.0.16\n\n## Requested Signatures\n- CIV signature for civilian ATAK distribution\n- MIL signature if applicable for military distribution\n" > build/signing/SIGNING_REQUEST.md
    - echo "Signing preparation complete"
  artifacts:
    paths:
      - build/signing/
    expire_in: 1 month
  when: manual
  only:
    - main
    - tags

# Test job (optional, requires Android emulator or device)
test:unit:
  stage: build
  image: openjdk:17-jdk-slim
  script:
    - chmod +x gradlew
    - ./gradlew test --stacktrace
  artifacts:
    reports:
      junit: app/build/test-results/test**/TEST-*.xml
    paths:
      - app/build/reports/tests/
    expire_in: 1 week
  when: manual