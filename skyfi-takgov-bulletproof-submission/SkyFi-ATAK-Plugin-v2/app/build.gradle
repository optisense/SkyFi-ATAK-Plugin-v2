////////////////////////////////////////////////////////////////////////////////
//
// PLUGIN_VERSION is the common version name when describing the plugin.
// ATAK_VERSION   is for the version of ATAK this plugin should be compatible
//                with some examples include 3.11.0, 3.11.0.civ 3.11.1.fvey
//
////////////////////////////////////////////////////////////////////////////////

buildscript {

    ext.PLUGIN_VERSION = "2.0"
    ext.ATAK_VERSION = "5.3.0"

    def takdevVersion = '2.+'

    def getValueFromPropertiesFile = { propFile, key ->
        if(!propFile.isFile() || !propFile.canRead())
            return null
        def prop = new Properties()
        def reader = propFile.newReader()
        try {
            prop.load(reader)
        } finally {
            reader.close()
        }
        return prop.get(key)
    }

    def getProperty = { name, defValue ->
        def prop = project.properties[name] ?:
                getValueFromPropertiesFile(project.rootProject.file('local.properties'), name)
        return (null == prop) ? defValue : prop
    }

    def urlKey = 'takrepo.url'

    ext.isDevKitEnabled = { ->
        return getProperty(urlKey, null) != null
    }

    ext.takrepoUrl = getProperty(urlKey, 'https://localhost/')
    ext.takrepoUser = getProperty('takrepo.user', 'invalid')
    ext.takrepoPassword = getProperty('takrepo.password', 'invalid')
    ext.takdevPlugin = getProperty('takdev.plugin', "${rootDir}/../../atak-gradle-takdev.jar")

    repositories {
        google()
        mavenCentral()
        mavenLocal()
        maven {
            url "https://jitpack.io"
        }
        maven {
            url = takrepoUrl
            credentials {
                username = takrepoUser
                password = takrepoPassword
            }
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.1'
        if(isDevKitEnabled()) {
            classpath "com.atakmap.gradle:atak-gradle-takdev:${takdevVersion}"
        } else {
            classpath files(takdevPlugin)
        }
    }
}

allprojects {
    repositories {
        mavenCentral()
        google()
        mavenLocal()
        maven {
            url "https://jitpack.io"
        }
    }
}

apply plugin: 'com.android.application'
apply plugin: 'atak-takdev-plugin'


def supportedFlavors =
        [
                [ name : 'civ', default: true ],
                [ name : 'mil' /** example: true **/],
                [ name : 'gov' ],
        ]

android {
    compileSdk 33

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        debug {
            storeFile file("${buildDir}/android_keystore")
            storePassword "tnttnt"
            keyAlias "wintec_mapping"
            keyPassword "tnttnt"
        }
    }

    buildTypes {
        debug {
            debuggable true
            matchingFallbacks = ['sdk']
        }
        release {
            minifyEnabled true
            proguardFiles 'proguard-gradle.txt'
            signingConfig signingConfigs.debug
            matchingFallbacks = ['odk']
        }
    }

    flavorDimensions "application"

    productFlavors {
        supportedFlavors.each { flav ->
            "${flav.name}" {
                getIsDefault().set(flav.default)
                dimension "application"

                // retain existing application identifiers for civ and mil
                if (!flav.name.equals("civ") && !flav.name.equals("mil")) {
                    applicationIdSuffix = ".${flav.name}"
                }
                // resolve CIV dependency if flavor specific dependency is not available
                matchingFallbacks = ['civ']

                // set the api version information
                def pluginApiFlavor = flav.name.equals('gov') ? 'CIV' : "${flav.name.toUpperCase()}"
                manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".${pluginApiFlavor}"]
            }
        }
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/INDEX.LIST']
        }
        jniLibs.useLegacyPackaging true
    }

    sourceSets {
        main {
            setProperty("archivesBaseName", "ATAK-Plugin-" + rootProject.name + "-" + PLUGIN_VERSION + "-" + getVersionName() + "-" + ATAK_VERSION)
            defaultConfig.versionCode = getVersionCode()
            defaultConfig.versionName = PLUGIN_VERSION + " (" + getVersionName() + ") - [" + ATAK_VERSION + "]"
        }

        gov.java.srcDirs 'src/gov/java'
        gov.assets.srcDir 'src/gov/assets'
        gov.res.srcDir 'src/gov/res'

        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    defaultConfig {
        applicationId "com.skyfi.atak.plugin"
        minSdkVersion 21
        targetSdkVersion 33

        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a"
        }
    }
    
    lint {
        abortOnError false
        checkReleaseBuilds true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: '*.jar')
    
    // Network dependencies
    implementation("com.squareup.okhttp3:okhttp:4.12.0")
    implementation("com.squareup.okhttp3:logging-interceptor:4.12.0")
    implementation('com.squareup.retrofit2:retrofit:2.11.0')
    implementation('com.squareup.retrofit2:converter-gson:2.11.0')
    
    // UI dependencies
    implementation('androidx.recyclerview:recyclerview:1.3.2')
    implementation('androidx.swiperefreshlayout:swiperefreshlayout:1.1.0')
    implementation('androidx.cardview:cardview:1.0.0')
    
    // Geometry library
    implementation('org.locationtech.jts:jts-core:1.16.1')
    
    // JSON processing
    implementation('com.google.code.gson:gson:2.10.1')
}

configurations.all {
    resolutionStrategy.eachDependency { details ->
        if (details.requested.group == 'androidx.core') {
            details.useVersion "1.15.0"
        }
    }
}

configurations.implementation {
    exclude group: 'androidx.core', module: 'core-ktx'
    exclude group: 'androidx.core', module: 'core'
    exclude group: 'androidx.fragment', module: 'fragment'
}