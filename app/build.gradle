////////////////////////////////////////////////////////////////////////////////
//
// PLUGIN_VERSION is the common version name when describing the plugin.
// ATAK_VERSION   is for the version of ATAK this plugin should be compatible
//                with some examples include 3.11.0, 3.11.0.civ 3.11.1.fvey
//
////////////////////////////////////////////////////////////////////////////////

buildscript {

    ext.PLUGIN_VERSION = "2.1"
    ext.ATAK_VERSION = "5.5.0"
    ext.MIN_ATAK_VERSION = "5.5.0"
    ext.MAX_ATAK_VERSION = "5.5.0.19"

    // Use official TAK.gov plugin version 2.+ for ATAK 4.2+
    def takdevVersion = '2.+'

    def getValueFromPropertiesFile = { propFile, key ->
        if(!propFile.isFile() || !propFile.canRead())
            return null
        def prop = new Properties()
        def reader = propFile.newReader()
        try {
            prop.load(reader)
        } finally {
            reader.close()
        }
        return prop.get(key)
    }

    def getProperty = { name, defValue ->
        // First check command line properties
        def prop = project.hasProperty(name) ? project.property(name) : null
        // Then check local.properties file
        if (prop == null) {
            prop = getValueFromPropertiesFile(project.rootProject.file('local.properties'), name)
        }
        // Finally use default value
        return (prop == null || prop == '') ? defValue : prop
    }

    def urlKey = 'takrepo.url'

    ext.isDevKitEnabled = { ->
        def url = getProperty(urlKey, null)
        return url != null && url != 'https://localhost/'
    }

    // Official TAK.gov repository configuration - default to localhost per TAK requirements
    ext.takrepoUrl = getProperty(urlKey, 'https://localhost/')
    ext.takrepoUser = getProperty('takrepo.user', 'invalid')
    ext.takrepoPassword = getProperty('takrepo.password', 'invalid')
    ext.takdevPlugin = getProperty('takdev.plugin', rootDir.absolutePath + "/atak-gradle-takdev.jar")

    repositories {
        google()
        mavenCentral()
        mavenLocal()
        maven {
            url "https://jitpack.io"
        }
        // TAK.gov virtual repository - includes all TAK repositories
        maven {
            url = "https://artifacts.tak.gov:443/artifactory/tak"
            credentials {
                username = takrepoUser
                password = takrepoPassword
            }
        }
        // Fallback to specific repositories if needed
        maven {
            url = "https://artifacts.tak.gov:443/artifactory/maven"
            credentials {
                username = takrepoUser
                password = takrepoPassword
            }
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.1'
        if(isDevKitEnabled()) {
            classpath "com.atakmap.gradle:atak-gradle-takdev:${takdevVersion}"
        } else {
            classpath files(takdevPlugin)
        }
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        mavenLocal()
        maven {
            url "https://jitpack.io"
        }
        // TAK.gov virtual repository - includes all TAK repositories
        maven {
            url = "https://artifacts.tak.gov:443/artifactory/tak"
            credentials {
                username = takrepoUser
                password = takrepoPassword
            }
        }
        // Fallback repository
        maven {
            url = "https://artifacts.tak.gov:443/artifactory/maven"
            credentials {
                username = takrepoUser
                password = takrepoPassword
            }
        }
        // Only add local SDK directories if they exist
        if (file("${rootDir}/ATAK-CIV-LATEST-SDK").exists()) {
            flatDir {
                dirs "${rootDir}/ATAK-CIV-LATEST-SDK"
            }
        }
        if (file("${rootDir}/ATAK-CIV-5.4.0.19-SDK").exists()) {
            flatDir {
                dirs "${rootDir}/ATAK-CIV-5.4.0.19-SDK"
            }
        }
    }
}

apply plugin: 'com.android.application'
apply plugin: 'atak-takdev-plugin'


def supportedFlavors =
        [
                [ name : 'civ', default: true ],
                [ name : 'mil' /** example: true **/],
                [ name : 'gov' ],
        ]

android {
    compileSdk 33
    namespace 'com.skyfi.atak.plugin'

    buildFeatures {
        buildConfig = true
    }
    
    // Disable DEX pre-optimization to avoid conflicts
    dexOptions {
        preDexLibraries false
        javaMaxHeapSize "4g"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    //kotlinOptions {
    //    jvmTarget = JavaVersion.VERSION_17
    //}

    // this is required and should not be removed otherwise the TAK
    // inner signing check will fail and the plugin will not load
    bundle {
        storeArchive {
            enable = false
        }
    }

    // this is required and should not be removed otherwise the
    // plugin will not be able to use native libraries
    packagingOptions {
        jniLibs {
            useLegacyPackaging = true
        }
    }


    signingConfigs {
        debug {
            // TAK.gov will handle signing - use placeholder for local testing
            def kf = file("${buildDir}/android_keystore")
            if (!kf.exists()) {
                kf = file("${rootDir}/android_keystore")
            }
            storeFile kf
            storePassword "tnttnt"
            keyAlias "wintec_mapping"
            keyPassword "tnttnt"
        }
        release {
            // TAK.gov will handle signing - use placeholder for local testing
            def kf = file("${buildDir}/android_keystore")
            if (!kf.exists()) {
                kf = file("${rootDir}/android_keystore")
            }
            storeFile kf
            storePassword "tnttnt"
            keyAlias "wintec_mapping"
            keyPassword "tnttnt"
        }
        playstore {
            // Play Store compatible signing - uses different keystore
            storeFile file("${rootDir}/keystores/playstore-compatible.keystore")
            storePassword "skyfi2024"
            keyAlias "skyfi-playstore"
            keyPassword "skyfi2024"
        }
        unsigned {
            // No signing config - for TAK.gov submission
            storeFile null
            storePassword null
            keyAlias null
            keyPassword null
        }
    }

    buildTypes {
        debug {
            debuggable true
            matchingFallbacks = ['sdk']
        }
        release {
            minifyEnabled true
            proguardFiles 'proguard-gradle.txt', 'proguard-gradle-repackage.txt'
            signingConfig signingConfigs.debug  // Use debug signing for now
            matchingFallbacks = ['odk']
        }
        unsigned {
            minifyEnabled true
            proguardFiles 'proguard-gradle.txt', 'proguard-gradle-repackage.txt'
            signingConfig null  // No signing for TAK.gov submission
            matchingFallbacks = ['odk']
        }
    }

    flavorDimensions "application"

    productFlavors {
        supportedFlavors.each { flav ->
            "${flav.name}" {
                getIsDefault().set(flav.default)
                dimension "application"

                // retain existing application identifiers for civ and mil
                if (!flav.name.equals("civ") && !flav.name.equals("mil")) {
                    applicationIdSuffix = ".${flav.name}"
                }
                // resolve CIV dependency if flavor specific dependency is not available
                matchingFallbacks = ['civ']

                // set the api version information
                def pluginApiFlavor = flav.name.equals('gov') ? 'CIV' : "${flav.name.toUpperCase()}"
                manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".${pluginApiFlavor}"]

                // additional variables associated with the flav can be set here once defined above
                // buildConfigField 'boolean', 'EXAMPLE', "${flav.example}"
            }
        }
        // additional variables associated with all flavors can be set here
        applicationVariants.all { variant ->
            variant.resValue "string", "versionName", variant.versionName
            
            // Set ATAK package name based on flavor
            def atakPackage = variant.productFlavors.find { it.name == 'playstore' } ? 
                            'com.atakmap.app.civ' : 'com.atakmap.app.civ'
            buildConfigField 'String', 'ATAK_PACKAGE_NAME', "\"${atakPackage}\""
            
            // Add compatibility flags
            def isPlayStore = variant.productFlavors.find { it.name == 'playstore' } != null
            buildConfigField 'boolean', 'IS_PLAYSTORE_BUILD', "${isPlayStore}"
        }
    }

    packagingOptions {

        resources {
            excludes += ['META-INF/INDEX.LIST']
            excludes += ['okhttp3/internal/publicsuffix/NOTICE']
            excludes += ['okhttp3/internal/publicsuffix/publicsuffixes.gz']
            excludes += ['META-INF/DEPENDENCIES']
            excludes += ['META-INF/LICENSE']
            excludes += ['META-INF/LICENSE.txt']
            excludes += ['META-INF/NOTICE']
            excludes += ['META-INF/NOTICE.txt']
            excludes += ['META-INF/DEPENDENCIES.txt']
            excludes += ['META-INF/LICENSE.md']
            excludes += ['META-INF/NOTICE.md']
            pickFirsts += ['okhttp3/internal/publicsuffix/NOTICE']
        }
        
        // Handle duplicate classes by picking first
        jniLibs {
            pickFirsts += ['**/*.so']
            useLegacyPackaging true
        }
    }

    sourceSets {
        main {

            // It is strongly encouraged that plugin developers do not modify the archiveBaseName, version code logic and version
            // name logic to provide for consistency within the community.
            setProperty("archivesBaseName", "ATAK-Plugin-" + rootProject.name + "-" + PLUGIN_VERSION + "-" + getVersionName() + "-" + ATAK_VERSION)
            defaultConfig.versionCode = getVersionCode()
            defaultConfig.versionName = PLUGIN_VERSION + " (" + getVersionName() + ") - [" + ATAK_VERSION + "]"
        }

        gov.java.srcDirs 'src/gov/java'
        gov.assets.srcDir 'src/gov/assets'
        gov.res.srcDir 'src/gov/res'

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')

    }

    defaultConfig {
        applicationId "com.skyfi.atak.plugin"
        minSdkVersion 21
        targetSdkVersion 33

        def runTasks = gradle.startParameter.taskNames
        if(runTasks.toString().contains('bundle')) {
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a"
            }
        } else {
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a", "x86"
            }
        }
    }
    lint {
        abortOnError true
        checkReleaseBuilds true
    }
}

afterEvaluate {
    // Fix ProGuard entry - replace "PluginTemplate" with plugin name
    project.file('proguard-gradle-repackage.txt').text = "-repackageclasses atakplugin.SkyFiATAKPlugin"

    try {
        tasks.named("compile" + getCommandFlavor() + "ReleaseKotlin") {
            println "modifying " + getCommandFlavor().toLowerCase() + " kotlin compile options to include: -Xsam-conversions=class"
            kotlinOptions {
                freeCompilerArgs += "-Xsam-conversions=class"
            }
        }
    } catch (Exception ignored) { }
}

// modified code to find the current flavor in progress
def getCommandFlavor() {
    String  tskReqStr = getGradle().getStartParameter().getTaskRequests().toString()

    java.util.regex.Pattern pattern
    if( tskReqStr.contains( "assemble" ) )
        pattern = java.util.regex.Pattern.compile("assemble(\\w+)(Release|Debug)")
    else if( tskReqStr.contains( "install" ) )
        pattern = java.util.regex.Pattern.compile("install(\\w+)(Release|Debug)")
    else
        pattern = java.util.regex.Pattern.compile("generate(\\w+)(Release|Debug)")

    java.util.regex.Matcher matcher = pattern.matcher(tskReqStr)

    if( matcher.find() ) {
        return matcher.group(1)
    } else {
        return "Civ"
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: '*.jar')
    
    // ATAK dependencies are provided automatically by TAK.gov repository
    // Local SDK paths removed for TAK.gov compatibility
    
    // OkHttp - exclude from ATAK to avoid duplicates
    implementation("com.squareup.okhttp3:okhttp:4.12.0") {
        exclude group: 'com.squareup.okio', module: 'okio'
    }
    implementation("com.squareup.okhttp3:logging-interceptor:4.12.0") {
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
        exclude group: 'com.squareup.okio', module: 'okio'
    }
    implementation('com.squareup.retrofit2:retrofit:2.11.0')
    implementation('com.squareup.retrofit2:converter-gson:2.11.0')
    // AndroidX UI components - needed for Java code
    implementation('androidx.recyclerview:recyclerview:1.3.2') {
        transitive = false  // Avoid pulling in conflicting dependencies
    }
    implementation('androidx.swiperefreshlayout:swiperefreshlayout:1.1.0') {
        transitive = false  // Avoid pulling in conflicting dependencies
    }
    // CardView removed - layouts now use FrameLayout instead
    // implementation('androidx.cardview:cardview:1.0.0')
    implementation('org.locationtech.jts:jts-core:1.16.1')
    // Removed Material Design - use standard Android/ATAK components instead
    
    // Additional ATAK dependencies for GL and map components
    // These are provided automatically by TAK.gov repository
    
    // AI and Machine Learning dependencies
    implementation('com.google.code.gson:gson:2.10.1') // JSON processing for AI models
    implementation('javax.websocket:javax.websocket-api:1.1') // WebSocket support for TAK MCP
    implementation('org.java-websocket:Java-WebSocket:1.5.4') // WebSocket client implementation
    
    // Test dependencies
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.11.0'
    testImplementation 'org.robolectric:robolectric:4.11.1'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    
    // AI-specific test dependencies
    testImplementation 'org.mockito:mockito-inline:5.2.0' // For mocking final classes in AI services
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.9' // For advanced mocking
}

configurations.all {
    resolutionStrategy.eachDependency { details ->
        if (details.requested.group == 'androidx.core') {
            details.useVersion "1.15.0"
        }
        if (details.requested.group == 'androidx.lifecycle') {
            details.useVersion "2.8.7"
        }
        if (details.requested.group == 'androidx.fragment') {
            details.useVersion "1.8.5"
        }
        // Force OkHttp version to avoid conflicts
        if (details.requested.group == 'com.squareup.okhttp3') {
            details.useVersion "4.12.0"
        }
    }
    
    // Exclude OkHttp from ATAK dependencies to avoid duplicate classes
    exclude group: 'com.squareup.okhttp', module: 'okhttp'
    exclude group: 'com.squareup.okhttp', module: 'okhttp-urlconnection'
}

configurations.implementation {
    // Exclude conflicting AndroidX libraries - ATAK provides its own
    // But keep RecyclerView and SwipeRefreshLayout which we need
    exclude group: 'androidx.core', module: 'core-ktx'
    exclude group: 'androidx.fragment', module: 'fragment'
    exclude group: 'androidx.fragment', module: 'fragment-ktx'
    exclude group: 'androidx.lifecycle', module: 'lifecycle-process'
    exclude group: 'androidx.lifecycle', module: 'lifecycle-runtime'
    exclude group: 'androidx.tracing', module: 'tracing'
    exclude group: 'androidx.tracing', module: 'tracing-ktx'
    exclude group: 'androidx.activity', module: 'activity'
    exclude group: 'androidx.savedstate', module: 'savedstate'
    exclude group: 'androidx.loader', module: 'loader'
    exclude group: 'androidx.viewpager', module: 'viewpager'
    exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
    exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-common'
}

// Custom tasks for Play Store compatible builds
task buildPlayStoreCompatible {
    description = 'Build APK compatible with Play Store ATAK'
    group = 'build'
    dependsOn 'assemblePlaystorePlaystore'
}

task buildAllVariants {
    description = 'Build all plugin variants (SDK and Play Store compatible)'
    group = 'build'
    dependsOn 'assembleCivRelease', 'assemblePlaystorePlaystore'
}

task createCompatibilityPackage(type: Zip) {
    description = 'Create deployment package with both SDK and Play Store compatible APKs'
    group = 'deployment'
    dependsOn 'buildAllVariants'
    
    from("${buildDir}/outputs/apk/civ/release/") {
        include "*.apk"
        rename { filename -> "sdk-compatible-${filename}" }
    }
    from("${buildDir}/outputs/apk/playstore/playstore/") {
        include "*.apk"
        rename { filename -> "playstore-compatible-${filename}" }
    }
    from("src/main/assets/") {
        include "plugin.xml"
    }
    
    archiveFileName = "skyfi-atak-plugin-compatibility-package-${PLUGIN_VERSION}.zip"
    destinationDirectory = file("${buildDir}/distributions")
}

// Generate compatibility documentation
task generateCompatibilityDocs {
    description = 'Generate compatibility documentation'
    group = 'documentation'
    
    doLast {
        def docsFile = file("${buildDir}/distributions/COMPATIBILITY_GUIDE.md")
        docsFile.parentFile.mkdirs()
        
        def guide = """
# SkyFi ATAK Plugin Compatibility Guide

## Overview
This package contains multiple APK variants designed for different ATAK installations.

## APK Variants

### SDK Compatible APK
- **File**: `sdk-compatible-*.apk`
- **Target**: ATAK SDK installations (development, TAK.gov builds)
- **Signing**: Uses ATAK SDK debug keystore
- **Installation**: Side-load via ADB or file manager

### Play Store Compatible APK  
- **File**: `playstore-compatible-*.apk`
- **Target**: Play Store ATAK installations
- **Signing**: Uses Play Store compatible keystore
- **Installation**: May require special permissions or companion app

## Installation Instructions

### For SDK ATAK Users:
1. Use `sdk-compatible-*.apk`
2. Install via: `adb install sdk-compatible-*.apk`
3. Launch ATAK and verify plugin loads

### For Play Store ATAK Users:
1. First try `playstore-compatible-*.apk`
2. If plugin doesn't load, install SkyFi Companion App
3. Follow companion app setup instructions

## Troubleshooting

### Plugin Not Loading:
- Check ATAK logs for signature validation errors
- Verify correct APK variant for your ATAK version
- Consider using companion app approach

### Permission Issues:
- Grant all required permissions in Android settings
- Enable "Install from unknown sources" if needed
- Check ATAK plugin management settings

## Technical Details

### Signature Differences:
- SDK APK: Signed with ATAK SDK keystore (debug)
- Play Store APK: Signed with Play Store compatible keystore
- Both contain identical functionality

### API Compatibility:
- Both variants target ATAK API version ${ATAK_VERSION}
- Compatible with ATAK-CIV and ATAK-MIL where authorized
- Uses standard ATAK plugin interfaces

## Support
- Documentation: https://docs.skyfi.com/atak
- Issues: https://github.com/skyfi/atak-plugin/issues
- Email: support@skyfi.com
"""
        
        docsFile.text = guide
        println "Compatibility guide generated: ${docsFile.absolutePath}"
    }
}

// Ensure compatibility package is built after main build
build.finalizedBy(createCompatibilityPackage)
createCompatibilityPackage.finalizedBy(generateCompatibilityDocs)
